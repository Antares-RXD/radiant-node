#ifndef BITCOIN_CHAINPARAMSCONSTANTS_H
#define BITCOIN_CHAINPARAMSCONSTANTS_H
/**
 * Chain params constants for each tracked chain.
 * @generated by contrib/devtools/chainparams/generate_chainparams_constants.py
 */

#include <primitives/blockhash.h>
#include <uint256.h>

namespace ChainParamsConstants {
    const BlockHash MAINNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000000000000000e7f24c197edd6de599d77fc837f630b6f4c6259dfeb4dd");
    const uint256 MAINNET_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000001765b047f3c2b0e03d74000");

    const BlockHash TESTNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000002e38a0fb71cba3698b4787c9755156668e86dbf495fcd2489b6c62");
    const uint256 TESTNET_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000000000073552e09a3b8e92bd5");

    const BlockHash TESTNET4_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000000b80e19dfd5e1fe093aa03b7e9d6cb8ce7637de1f2ecbd882bdfeb");
    const uint256 TESTNET4_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000000fd01607cbee7e6");

    // Scalenet re-organizes above height 10,000 - use block 9,999 hash here.
    const BlockHash SCALENET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000007fb3362740efd1435aa414f54171993483799782f83c61bc7bf1b1be");
    const uint256 SCALENET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000003a54dce8032552f");
} // namespace ChainParamsConstants

#endif // BITCOIN_CHAINPARAMSCONSTANTS_H
